GET /auth
1. Парс запроса , проверка типа запроса (get), проверяю, что путь равен = /auth
2. Формирую ДТО для ответа, формирую хедер для респонса с ответом 200 ОК (content-type=text/html, content-length, server, version)
3. Отправляю логин форму с двумя полями (логин и пароль).

POST /auth/challenge
1.Проверить, что это POST запрос, валидность пути
2. Если тело запроса пустое или нет одного из параметров -> вернем 400 ошибку
3. Создать словарь юзеров, занести туда кого-то из проверить соответствует ли введнные данные хоть одному из них, если нет 401 (распарсить юзеров по амперсанту и занести в словарь)
3.1 Сет кукис идут в реквесте
4. С помощью гуида создать пару userlogin = guid_value, сохранить этот гуид в коллекции (словарь,который позволяет добавлять не уникальные данные).
5. Устанавливаем в респонсе Set-Cookie: guid_value
6. Вернуть контент с сообщением об успешной аунтентификации 200 ок.


1. Делаем проверку к обращаемому ресурсу, если это html/images, проверяем тип запроса (get), путь к ресурсу starts with /pages/ or /images/
2. Проверяем установлены ли у данного юзера куки: 
- проверяем наличие хедера  Cookie,
- распарсить строку с куки,трим и добавить все в словарь (имя - значение куки), если прислали плохой реквест, отправляем 400 (также проверить что коллекция не пустая)
- Проверить содержиться ли в коллекции имя куки сервера, если нет возвращаем 401
- По полученному гуиду вернуть логин пользователя, если такого нет -> 401
3. Если у юзера есть куки, проверить путь /pages/ or /images/ и вернуть соответствующий ресурс, если такого нет, то возвращаем 404.
4. Отдаём респонс.